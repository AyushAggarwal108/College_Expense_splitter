"use client"
import jsPDF from "jspdf"
import "./BalanceSummary.css"

const BalanceSummary = ({ balances, groupName }) => {
  const generatePDF = () => {
    const doc = new jsPDF()

    const primary = [99, 102, 241]
    const success = [16, 185, 129]
    const danger = [239, 68, 68]
    const gray = [107, 114, 128]
    const lightGray = [249, 250, 251]

    doc.setFillColor(primary[0], primary[1], primary[2])
    doc.rect(0, 0, 210, 50, "F")

    doc.setTextColor(255, 255, 255)
    doc.setFontSize(28)
    doc.setFont("helvetica", "bold")
    doc.text("EXPENSE REPORT", 20, 25)

    doc.setFontSize(16)
    doc.setFont("helvetica", "normal")
    doc.text(`Group: ${groupName}`, 20, 38)

    doc.setTextColor(gray[0], gray[1], gray[2])
    doc.setFontSize(10)
    const currentDate = new Date().toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    })
    doc.text(`Generated: ${currentDate}`, 20, 65)

    let yPos = 85

    doc.setTextColor(primary[0], primary[1], primary[2])
    doc.setFontSize(20)
    doc.setFont("helvetica", "bold")
    doc.text("SETTLEMENT SUMMARY", 20, yPos)

    doc.setDrawColor(primary[0], primary[1], primary[2])
    doc.setLineWidth(1)
    doc.line(20, yPos + 3, 110, yPos + 3)

    yPos += 20

    const activeBalances = balances.filter((balance) => balance.amount > 0)

    if (activeBalances.length === 0) {
      doc.setFillColor(success[0], success[1], success[2])
      doc.roundedRect(15, yPos - 5, 180, 30, 5, 5, "F")

      doc.setTextColor(255, 255, 255)
      doc.setFontSize(18)
      doc.setFont("helvetica", "bold")
      doc.text("ALL EXPENSES SETTLED!", 25, yPos + 8)

      doc.setFontSize(12)
      doc.setFont("helvetica", "normal")
      doc.text("No transactions needed - everyone is even!", 25, yPos + 18)

      yPos += 40
    } else {
      doc.setTextColor(gray[0], gray[1], gray[2])
      doc.setFontSize(12)
      doc.setFont("helvetica", "normal")
      doc.text("Complete these transactions to settle all expenses:", 20, yPos)
      yPos += 15

      doc.setFillColor(lightGray[0], lightGray[1], lightGray[2])
      doc.rect(15, yPos - 5, 180, 15, "F")

      doc.setTextColor(gray[0], gray[1], gray[2])
      doc.setFontSize(12)
      doc.setFont("helvetica", "bold")
      doc.text("FROM", 20, yPos + 5)
      doc.text("TO", 80, yPos + 5)
      doc.text("AMOUNT", 150, yPos + 5)

      yPos += 20

      activeBalances.forEach((balance, index) => {
        if (yPos > 250) {
          doc.addPage()
          yPos = 30
        }

        if (index % 2 === 0) {
          doc.setFillColor(250, 250, 250)
          doc.rect(15, yPos - 8, 180, 20, "F")
        }

        doc.setTextColor(danger[0], danger[1], danger[2])
        doc.setFontSize(12)
        doc.setFont("helvetica", "bold")
        doc.text(balance.from, 20, yPos)

        doc.setTextColor(success[0], success[1], success[2])
        doc.setFontSize(12)
        doc.setFont("helvetica", "bold")
        doc.text(balance.to, 80, yPos)

        doc.setTextColor(0, 0, 0)
        doc.setFont("helvetica", "bold")
        const amountText = `Rs. ${balance.amount.toFixed(2)}`
        doc.text(amountText, 150, yPos)

        yPos += 20
      })
    }

    if (yPos > 220) {
      doc.addPage()
      yPos = 30
    }

    yPos += 20
    doc.setTextColor(primary[0], primary[1], primary[2])
    doc.setFontSize(16)
    doc.setFont("helvetica", "bold")
    doc.text("SUMMARY STATISTICS", 20, yPos)

    doc.setDrawColor(primary[0], primary[1], primary[2])
    doc.line(20, yPos + 3, 85, yPos + 3)

    yPos += 15
    doc.setTextColor(gray[0], gray[1], gray[2])
    doc.setFontSize(11)
    doc.setFont("helvetica", "normal")

    const totalAmount = activeBalances.reduce((sum, b) => sum + b.amount, 0)
    doc.text(`Total amount to settle: Rs. ${totalAmount.toFixed(2)}`, 25, yPos)
    yPos += 10
    doc.text(`Number of transactions: ${activeBalances.length}`, 25, yPos)
    yPos += 10
    doc.text(`Settlement method: Optimized for minimum transfers`, 25, yPos)

    doc.setTextColor(150, 150, 150)
    doc.setFontSize(9)
    doc.setFont("helvetica", "italic")
    doc.text("Generated by College Expense Splitter App", 20, 285)
    doc.text("Page 1", 180, 285)

    doc.setDrawColor(200, 200, 200)
    doc.setLineWidth(0.5)
    doc.rect(10, 10, 190, 277)

    const cleanGroupName = groupName.replace(/[^a-zA-Z0-9]/g, "_")
    const dateStr = new Date().toISOString().split("T")[0]
    const fileName = `${cleanGroupName}_expense_report_${dateStr}.pdf`
    doc.save(fileName)
  }

  if (balances.length === 0) {
    return (
      <div className="balance-summary card">
        <h2 className="summary-title">Balance Summary</h2>
        <div className="empty-state">
          <p>No expenses added yet.</p>
          <p>Add some expenses to see the settlement summary!</p>
        </div>
      </div>
    )
  }

  const activeBalances = balances.filter((balance) => balance.amount > 0)

  return (
    <div className="balance-summary card">
      <div className="summary-header">
        <h2 className="summary-title">Balance Summary</h2>
        <button className="btn btn-secondary export-btn" onClick={generatePDF}>
          ðŸ“„ Export PDF
        </button>
      </div>

      {activeBalances.length === 0 ? (
        <div className="settled-state">
          <div className="settled-icon">ðŸŽ‰</div>
          <h3>All Settled!</h3>
          <p>Everyone has paid their fair share. No transactions needed!</p>
        </div>
      ) : (
        <div className="balances-container">
          <div className="settlement-info">
            <p>Complete these transactions to settle all expenses:</p>
          </div>

          <div className="balance-list">
            {activeBalances.map((balance, index) => (
              <div key={index} className="balance-item">
                <div className="balance-main">
                  <span className="debtor">{balance.from}</span>
                  <span className="arrow">â†’</span>
                  <span className="creditor">{balance.to}</span>
                </div>
                <div className="balance-amount">â‚¹{balance.amount.toFixed(2)}</div>
              </div>
            ))}
          </div>

          <div className="settlement-tip">
            <p>
              <strong>ðŸ’¡ Tip:</strong> These are the minimum transactions needed to settle all debts!
            </p>
          </div>
        </div>
      )}
    </div>
  )
}

export default BalanceSummary
